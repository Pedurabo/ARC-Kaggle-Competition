pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'arc-ai:latest'
        DOCKER_REGISTRY = 'your-registry.com'
        PYTHON_VERSION = '3.11'
        SECURITY_SCAN_THRESHOLD = 'HIGH'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo 'Code checked out successfully'
            }
        }
        
        stage('Security Scan - Code') {
            parallel {
                stage('Bandit Security Scan') {
                    steps {
                        script {
                            echo 'Running Bandit security scan...'
                            sh '''
                                pip install bandit
                                bandit -r src/ -f json -o security-bandit-report.json || true
                            '''
                        }
                    }
                    post {
                        always {
                            publishJSON([
                                json: 'security-bandit-report.json',
                                id: 'bandit-report'
                            ])
                        }
                    }
                }
                
                stage('Safety Dependency Scan') {
                    steps {
                        script {
                            echo 'Running Safety dependency scan...'
                            sh '''
                                pip install safety
                                safety check --json --output safety-report.json || true
                            '''
                        }
                    }
                    post {
                        always {
                            publishJSON([
                                json: 'safety-report.json',
                                id: 'safety-report'
                            ])
                        }
                    }
                }
                
                stage('Trivy Container Scan') {
                    steps {
                        script {
                            echo 'Running Trivy container scan...'
                            sh '''
                                docker build -t ${DOCKER_IMAGE} -f devops/Dockerfile .
                                trivy image --format json --output trivy-report.json ${DOCKER_IMAGE} || true
                            '''
                        }
                    }
                    post {
                        always {
                            publishJSON([
                                json: 'trivy-report.json',
                                id: 'trivy-report'
                            ])
                        }
                    }
                }
            }
        }
        
        stage('Quality Gates') {
            steps {
                script {
                    echo 'Running quality gates...'
                    
                    // Check security scan results
                    if (fileExists('security-bandit-report.json')) {
                        def banditResults = readJSON file: 'security-bandit-report.json'
                        def highIssues = banditResults.results.findAll { it.issue_severity == 'HIGH' }.size()
                        
                        if (highIssues > 0) {
                            error "Security scan failed: ${highIssues} HIGH severity issues found"
                        }
                    }
                    
                    // Check dependency vulnerabilities
                    if (fileExists('safety-report.json')) {
                        def safetyResults = readJSON file: 'safety-report.json'
                        if (safetyResults.size() > 0) {
                            echo "Warning: ${safetyResults.size()} dependency vulnerabilities found"
                        }
                    }
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    echo 'Installing Python dependencies...'
                    sh '''
                        python -m venv venv
                        source venv/bin/activate
                        pip install --upgrade pip
                        pip install -r requirements.txt
                        pip install pytest pytest-cov bandit safety
                    '''
                }
            }
        }
        
        stage('Code Quality') {
            parallel {
                stage('Linting') {
                    steps {
                        script {
                            echo 'Running code linting...'
                            sh '''
                                source venv/bin/activate
                                pip install flake8 black isort
                                flake8 src/ --max-line-length=100 --count --statistics
                                black --check src/
                                isort --check-only src/
                            '''
                        }
                    }
                }
                
                stage('Type Checking') {
                    steps {
                        script {
                            echo 'Running type checking...'
                            sh '''
                                source venv/bin/activate
                                pip install mypy
                                mypy src/ --ignore-missing-imports
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Testing') {
            parallel {
                stage('Unit Tests') {
                    steps {
                        script {
                            echo 'Running unit tests...'
                            sh '''
                                source venv/bin/activate
                                pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
                            '''
                        }
                    }
                    post {
                        always {
                            publishCoverage([
                                adapters: [jacocoAdapter('**/target/site/jacoco/jacoco.xml')],
                                sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
                            ])
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'htmlcov',
                                reportFiles: 'index.html',
                                reportName: 'Coverage Report'
                            ])
                        }
                    }
                }
                
                stage('Integration Tests') {
                    steps {
                        script {
                            echo 'Running integration tests...'
                            sh '''
                                source venv/bin/activate
                                python -m pytest tests/integration/ -v
                            '''
                        }
                    }
                }
                
                stage('Performance Tests') {
                    steps {
                        script {
                            echo 'Running performance tests...'
                            sh '''
                                source venv/bin/activate
                                python test_models.py --model ensemble --performance
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Model Training & Validation') {
            steps {
                script {
                    echo 'Training and validating models...'
                    sh '''
                        source venv/bin/activate
                        python train_breakthrough_modules.py --model_type abstract_reasoning --epochs 5
                        python train_breakthrough_modules.py --model_type meta_learning --epochs 5
                        python train_breakthrough_modules.py --model_type multi_modal --epochs 5
                    '''
                }
            }
        }
        
        stage('Accuracy Validation') {
            steps {
                script {
                    echo 'Validating model accuracy...'
                    sh '''
                        source venv/bin/activate
                        python test_models.py --model ensemble
                        python verify_repository.py
                    '''
                    
                    // Check if accuracy meets target
                    def accuracy = sh(
                        script: 'python -c "import json; print(json.load(open(\'accuracy_report.json\'))[\'overall\'][\'avg_accuracy\'])"',
                        returnStdout: true
                    ).trim().toDouble()
                    
                    if (accuracy < 0.25) {
                        echo "Warning: Current accuracy ${accuracy} is below 25% target"
                    } else {
                        echo "Success: Current accuracy ${accuracy} meets target"
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image...'
                    sh '''
                        docker build -t ${DOCKER_IMAGE} -f devops/Dockerfile .
                        docker tag ${DOCKER_IMAGE} ${DOCKER_REGISTRY}/${DOCKER_IMAGE}
                    '''
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'main'
            }
            steps {
                script {
                    echo 'Deploying to staging environment...'
                    sh '''
                        docker-compose -f devops/docker-compose.yml down
                        docker-compose -f devops/docker-compose.yml up -d
                        
                        # Wait for services to be ready
                        sleep 30
                        
                        # Run health checks
                        curl -f http://localhost:8000/health || exit 1
                        curl -f http://localhost:9090/-/healthy || exit 1
                        curl -f http://localhost:3000/api/health || exit 1
                    '''
                }
            }
        }
        
        stage('Staging Tests') {
            when {
                branch 'main'
            }
            steps {
                script {
                    echo 'Running staging tests...'
                    sh '''
                        # Test API endpoints
                        curl -X POST http://localhost:8000/predict -H "Content-Type: application/json" -d '{"input": [[0,1],[1,0]]}'
                        
                        # Test monitoring endpoints
                        curl http://localhost:8000/metrics
                        curl http://localhost:9090/metrics
                        
                        # Test logging
                        curl -X POST http://localhost:8000/log -H "Content-Type: application/json" -d '{"level": "info", "message": "test"}'
                    '''
                }
            }
        }
        
        stage('Performance Optimization') {
            when {
                branch 'main'
            }
            steps {
                script {
                    echo 'Running performance optimization...'
                    sh '''
                        source venv/bin/activate
                        python -c "
from src.optimization.performance_optimizer import get_performance_optimizer
optimizer = get_performance_optimizer()
optimizer.current_accuracy = 0.17  # Current accuracy
results = optimizer.optimize_for_30_percent({})
print('Optimization results:', results)
"
                    '''
                }
            }
        }
        
        stage('Generate Reports') {
            steps {
                script {
                    echo 'Generating comprehensive reports...'
                    sh '''
                        source venv/bin/activate
                        
                        # Generate test report
                        pytest tests/ --junitxml=test-results.xml
                        
                        # Generate coverage report
                        coverage report --show-missing
                        
                        # Generate security report
                        python -c "
from src.security.security_manager import get_security_manager
security = get_security_manager()
report = security.get_security_report()
import json
with open('security-report.json', 'w') as f:
    json.dump(report, f, indent=2)
"
                        
                        # Generate performance report
                        python -c "
from src.monitoring.metrics import get_metrics_collector
metrics = get_metrics_collector()
summary = metrics.get_performance_summary()
import json
with open('performance-report.json', 'w') as f:
    json.dump(summary, f, indent=2)
"
                    '''
                }
            }
            post {
                always {
                    publishTestResults(testResults: ['test-results.xml'])
                    publishJSON([
                        json: 'security-report.json',
                        id: 'security-report'
                    ])
                    publishJSON([
                        json: 'performance-report.json',
                        id: 'performance-report'
                    ])
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completed'
            cleanWs()
        }
        success {
            echo 'Pipeline succeeded!'
            emailext (
                subject: "ARC AI Pipeline SUCCESS - Build ${env.BUILD_NUMBER}",
                body: "The ARC AI pipeline has completed successfully.\n\nBuild: ${env.BUILD_NUMBER}\nBranch: ${env.BRANCH_NAME}\nDuration: ${currentBuild.durationString}",
                to: 'team@arc-ai.com'
            )
        }
        failure {
            echo 'Pipeline failed!'
            emailext (
                subject: "ARC AI Pipeline FAILURE - Build ${env.BUILD_NUMBER}",
                body: "The ARC AI pipeline has failed.\n\nBuild: ${env.BUILD_NUMBER}\nBranch: ${env.BRANCH_NAME}\nDuration: ${currentBuild.durationString}\n\nPlease check the logs for details.",
                to: 'team@arc-ai.com'
            )
        }
    }
} 